<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutUs" xml:space="preserve">
    <value>This all started in the first classes of Web Composing in the University of Beira Interior, Covilhã. The professor suggested us to build groups to work together on a web page, and because it was still the beggining of the first year semester, we didn’t know much people yet. It ended to be the professor to tell us to work together: Tiago, a freshman, and Lukasz, a polish ERASMUS student. Our common interest of trips and adventure lead us to the theme of the project: a online travellers community that can use “Travel Site” to share their experiences, photos and to know new places. Everything in one place. A website build for the community and from the community. We join efforts to build what we think it’s the “Best community travel in the web”, our slogan. With continuum improvements and a dynamic vision, we hope to become our community in one of the largest online and that each user, following the good working rules, take advantage of our functionalities and help us to reach that goal.
Come travel with us!</value>
  </data>
  <data name="Accept" xml:space="preserve">
    <value>Accept</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AddComment" xml:space="preserve">
    <value>Add comment</value>
  </data>
  <data name="addedby" xml:space="preserve">
    <value>added by</value>
  </data>
  <data name="AddRanking" xml:space="preserve">
    <value>Add Ranking</value>
  </data>
  <data name="BacktoList" xml:space="preserve">
    <value>Back to List</value>
  </data>
  <data name="BestRankingPlaces" xml:space="preserve">
    <value>Best Ranking Places</value>
  </data>
  <data name="Comments" xml:space="preserve">
    <value>Comments</value>
  </data>
  <data name="CommentsAddedByUser" xml:space="preserve">
    <value>Comments added by user</value>
  </data>
  <data name="Contact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="ContentInEnglish" xml:space="preserve">
    <value>Content in English</value>
  </data>
  <data name="ContentInPolish" xml:space="preserve">
    <value>Content in Polish</value>
  </data>
  <data name="ContentInPortuguese" xml:space="preserve">
    <value>Content in Portuguese</value>
  </data>
  <data name="Countries" xml:space="preserve">
    <value>Countries</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditPlace" xml:space="preserve">
    <value>Edit Place</value>
  </data>
  <data name="English" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="Footer" xml:space="preserve">
    <value>Best travel site ever By Tiago &amp; Lukasz</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="MostPopularPlaces" xml:space="preserve">
    <value>Most Popular Places</value>
  </data>
  <data name="MostUnknownPlaces" xml:space="preserve">
    <value>Most Unknown Places</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NewestPlaces" xml:space="preserve">
    <value>Newest Places</value>
  </data>
  <data name="Places" xml:space="preserve">
    <value>Places</value>
  </data>
  <data name="PlacesAddedByUser" xml:space="preserve">
    <value>Places added by user</value>
  </data>
  <data name="PlacesnotAccepted" xml:space="preserve">
    <value>Places not Accepted</value>
  </data>
  <data name="PlacesVisitedByUser" xml:space="preserve">
    <value>Places visited by user</value>
  </data>
  <data name="Polish" xml:space="preserve">
    <value>Polish</value>
  </data>
  <data name="Portuguese" xml:space="preserve">
    <value>Portuguese</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="RemoveVisit" xml:space="preserve">
    <value>Remove Visit</value>
  </data>
  <data name="ReviewIt" xml:space="preserve">
    <value>Review It</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Score" xml:space="preserve">
    <value>Score</value>
  </data>
  <data name="See" xml:space="preserve">
    <value>See</value>
  </data>
  <data name="SeeMore" xml:space="preserve">
    <value>See more</value>
  </data>
  <data name="SignIn" xml:space="preserve">
    <value>Sign In</value>
  </data>
  <data name="SignOut" xml:space="preserve">
    <value>Sign Out</value>
  </data>
  <data name="SiteSubTitle" xml:space="preserve">
    <value>Best travel community in the web</value>
  </data>
  <data name="SiteTitle" xml:space="preserve">
    <value>Travel Site</value>
  </data>
  <data name="UserDetails" xml:space="preserve">
    <value>User Details</value>
  </data>
  <data name="Visited" xml:space="preserve">
    <value>Visited</value>
  </data>
  <data name="ClearFilter" xml:space="preserve">
    <value>Clear Filter</value>
  </data>
  <data name="Filter" xml:space="preserve">
    <value>Filter</value>
  </data>
</root>